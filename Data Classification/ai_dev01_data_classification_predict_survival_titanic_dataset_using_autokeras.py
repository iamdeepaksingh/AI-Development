# -*- coding: utf-8 -*-
"""AI Dev01 - Data Classification - Predict survival - Titanic Dataset using AutoKeras.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1JMOkKbg7pKPz9P3-TMznfdywVIaGi7uo
"""

# Author: Deepak Kumar Singh
# Description: AI Dev01 - Data Classification - Predict survival based on Titanic Dataset using AutoKeras.
# Reference - https://autokeras.com/tutorial/structured_data_classification/
# Date Created: 21/01/2023
# Date Modified: 22/01/2023

# Installations for Libraries which are not available in Google Colab

!pip install autokeras

# Upload dataset from local drive to Colab
# Other Alternative way to use dtasets with Colab - https://towardsdatascience.com/3-ways-to-load-csv-files-into-colab-7c14fcbdcb92

from google.colab import files
uploaded = files.upload()

import pandas as pd
import numpy as np

import seaborn as sns
import plotly.express as px
import matplotlib.pyplot as plt

import tensorflow as tf
import autokeras as ak


from sklearn.linear_model import LinearRegression
from sklearn.model_selection import train_test_split

# Sanity check that dataset is loaded to Pandas DF
import io
import pandas as pd
data = pd.read_csv(io.BytesIO(uploaded['Titanic.csv']))
# Dataset is now stored in a Pandas Dataframe

data.head()
len(data)

data.shape

data.columns

print(data.isna().values.any())
print(data.duplicated().values.any())

import seaborn as sns

sns.pairplot(data)

target = data['Survived']
features = data.drop('Survived', axis=1)

X_train, X_test, y_train, y_test = train_test_split(features, 
                                                    target, 
                                                    test_size=0.2, 
                                                    random_state=10)

X_train.head()
y_train.head()


X_test.head()
y_test.head()

# More on https://autokeras.com/tutorial/structured_data_classification/
classifier = ak.StructuredDataClassifier(    
    max_trials = 5) #This indicates there will be 5 trials and AutoKeras will choose the best model and parameters.

# Model Training
classifier.fit(
    x = X_train,
    y = y_train,
    epochs = 10)

# Summary of Model
classifier.export_model().summary()

# Model Evaluation
score = classifier.evaluate(
    x = X_test,
    y = y_test)

# Accuracy of Model
print(score[1])

# Spot checks with random input
A_x = pd.DataFrame(
    data = [{
        "Sex": "female",
        "Age" : 34,         
        "Family" : 2,
        "Class" : 1,
        "Fare" : 250.0,
        "Cabin" : "B",
        "Port" : "Cherbourg"}])

A_x.head()

# Predict if A will survive
classifier.predict(A_x)[0][0]

B_x = pd.DataFrame(
    data = [{
        "Sex": "male",
        "Age" : 21,         
        "Family" : 1,
        "Class" : 2,
        "Fare" : 355.0,        
        "Cabin" : "F",
        "Port" : "Southampton"}])

B_x.head()

# Predict if B will survive
classifier.predict(B_x)[0][0]